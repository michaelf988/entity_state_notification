blueprint:
  name: "💬 Zustandsbenachrichtigung (Blueprint v1.1_beta)"
  description: >
    Benachrichtigt dich, wenn ausgewählte Entitäten einen Zielzustand erreichen
    (oder numerisch darüber/darunter liegen). Optional periodische Wiederholung,
    Aktionen und Bedingungen.
  source_url: https://github.com/panhans/HomeAssistant/blob/main/blueprints/automation/panhans/entity_state_notification.yaml
  domain: automation

  input:
    sensor_section:
      name: Entitäten / Gleichheitsvergleich
      icon: mdi:equal-box
      collapsed: true
      input:
        input_entities:
          name: "🖲️ Beobachtete Entitäten"
          description: >
            Entitäten, die die Benachrichtigung auslösen.
          default: []
          selector:
            entity:
              multiple: true
        input_entity_states:
          name: "🟢 Zielzustände"
          description: >
            Zustände, die die Automatisierung auslösen.
          default: []
          selector:
            text:
              multiple: true
        input_entity_state_duration:
          name: "⏲️ Verweilzeit im Zielzustand"
          description: >
            Dauer, die die Entität im Zielzustand sein muss.
          default:
            hours: 0
            minutes: 0
            seconds: 2
          selector:
            duration:

    state_multi_section:
      name: Mehrere Zustände (indexbasiert)
      icon: mdi:format-list-bulleted
      collapsed: true
      input:
        ms_entities:
          name: "🖲️ Entitäten (Mehrfach)"
          description: >
            Liste der zu überwachenden Entitäten. Die Position entspricht den
            Zielzuständen in der nächsten Liste.
          default: []
          selector:
            entity:
              multiple: true
        ms_target_states:
          name: "🟢 Zielzustände je Entität"
          description: >
            Für jede Entität ein Eintrag. Mehrere Zustände pro Eintrag mit | oder , trennen
            (z. B. "on|open", "home,available").
          default: []
          selector:
            text:
              multiple: true

    numeric_entity_section:
      name: Numerischer Vergleich (über/unter)
      icon: mdi:code-greater-than
      collapsed: true
      input:
        input_numeric_entities:
          name: "🖲️ Beobachtete numerische Entitäten"
          description: >
            Entitäten, die die Benachrichtigung auslösen.
          default: []
          selector:
            entity:
              multiple: true
        input_numeric_entity_operator:
          name: "🔃 Operator"
          description: >
            Operator für den Vergleich mit dem Zielwert.
          default: "above"
          selector:
            select:
              options:
                - label: "▶️ über"
                  value: "above"
                - label: "◀️ unter"
                  value: "below"
        input_numeric_entity_state:
          name: "🟢 Zielwert"
          description: >
            Wert, der die Automatisierung auslöst.
          default: 0
          selector:
            number:
              max: 9999999999
              min: -9999999999
        input_numeric_entity_state_duration:
          name: "⏲️ Verweilzeit im Zielzustand"
          description: >
            Dauer, die die Entität im Zielzustand sein muss.
          default:
            hours: 0
            minutes: 0
            seconds: 2
          selector:
            duration:

    numeric_multi_section:
      name: Mehrere numerische Vergleiche (indexbasiert)
      icon: mdi:view-list
      collapsed: true
      input:
        nm_entities:
          name: "🖲️ Numerische Entitäten (Mehrfach)"
          description: >
            Liste der zu überwachenden numerischen Entitäten. Die Position
            entspricht dem passenden Operator/Grenzwert unten.
          default: []
          selector:
            entity:
              multiple: true
        nm_operators:
          name: "🔃 Operatoren je Entität"
          description: >
            Operator für jede Entität (gleiche Reihenfolge wie oben).
          default: []
          selector:
            select:
              multiple: true
              options:
                - above
                - below
        # FIX: number.multiple ist nicht erlaubt -> Textliste verwenden
        nm_values:
          name: "🟢 Grenzwerte je Entität"
          description: >
            Grenzwert pro Entität (gleiche Reihenfolge wie oben). Zahlen eingeben.
          default: []
          selector:
            text:
              multiple: true

    notifcation_section:
      name: Benachrichtigung
      icon: mdi:chat
      collapsed: true
      input:
        input_notify_devices:
          name: "📱 Gerät(e) benachrichtigen"
          description: >
            Geräte/Gruppen, die die Benachrichtigung erhalten.
          default: []
          selector:
            device:
              multiple: true
              filter:
                integration: mobile_app
        input_notify_groups:
          name: "🫂 Benachrichtigungsgruppen"
          description: >
            Namen von Notification-Gruppen (notify.Gruppenname).
          default: []
          selector:
            text:
              multiple: true
        input_title:
          name: "📕 Titel"
          description: >
            Titel der Benachrichtigung.
          default: "{{ entity_name }} ist {{ new_state }}"
        input_message:
          name: "💬 Nachricht"
          description: >
            Text der Benachrichtigung.
          default: "Hinweis: {{ entity_name }} ist {{ new_state }}"
        input_persistent_notification:
          name: "🪨 Persistente Benachrichtigung"
          description: >
            Kann nicht weggewischt werden; verschwindet erst,
            wenn die Entität den Zielzustand verlässt.
          default: false
          selector:
            boolean:
        input_notification_auto_delete:
          name: "❌ Auto-Schließen"
          description: >
            Benachrichtigungen automatisch schließen,
            wenn die Zielzustands-Bedingung nicht mehr gilt.
          default: true
          selector:
            boolean:
        input_ha_notification:
          name: "🏠 HA-Benachrichtigung (Frontend)"
          description: >
            Erstellt zusätzlich eine persistente Benachrichtigung im HA-Frontend.
          default: false
          selector:
            boolean:
        input_interruption_level:
          name: "⛔ Interruption Level (iOS)"
          description: >
            Einstellen, wie „dringlich“ die Benachrichtigung ist.
          default: "active"
          selector:
            select:
              options:
                - passive
                - active
                - time-sensitive
                - critical
        input_custom_tag:
          name: "🏷️ Tag"
          description: >
            Tag für die Benachrichtigung (zur späteren Identifikation).
            Leer lassen, um einen Tag automatisch zu generieren.
          default: ""
          selector:
            text:
        input_ios_sound:
          name: "🔊 iOS Sound"
          description: >
            Name des Sounds (z. B. default oder <Soundname>).
          default: "default"
          selector:
            text:
        input_group_text:
          name: "📑 Group"
          description: >
            Gruppiere Benachrichtigungen über diese Kennung.
          default: ""
          selector:
            text:

    actionable_section:
      name: Actionable Notifications
      icon: mdi:gesture-tap-button
      collapsed: true
      input:
        input_action_timeout:
          name: "⏳ Antwort-Timeout"
          description: >
            Wartezeit auf eine Antwort-Aktion.
          default:
            hours: 0
            minutes: 0
            seconds: 60
          selector:
            duration:
        input_action1_enabled:
          name: "Aktion 1 aktivieren"
          default: false
          selector:
            boolean:
        input_action1_title:
          name: "Titel Aktion 1"
          default: "Aktion 1"
          selector:
            text:
        input_action1_type:
          name: "Typ Aktion 1"
          default: "uri"
          selector:
            select:
              options:
                - uri
                - ha_action
        input_action1_uri:
          name: "URI Aktion 1 (falls Typ=uri)"
          default: ""
          selector:
            text:
        input_action1_destructive:
          name: "Destructive (Aktion 1)"
          default: false
          selector:
            boolean:
        input_action1_ha_action:
          name: "HA-Aktion bei Antwort (Aktion 1, falls Typ=ha_action)"
          default: []
          selector:
            action: {}
        input_action2_enabled:
          name: "Aktion 2 aktivieren"
          default: false
          selector:
            boolean:
        input_action2_title:
          name: "Titel Aktion 2"
          default: "Aktion 2"
          selector:
            text:
        input_action2_type:
          name: "Typ Aktion 2"
          default: "uri"
          selector:
            select:
              options:
                - uri
                - ha_action
        input_action2_uri:
          name: "URI Aktion 2 (falls Typ=uri)"
          default: ""
          selector:
            text:
        input_action2_destructive:
          name: "Destructive (Aktion 2)"
          default: false
          selector:
            boolean:
        input_action2_ha_action:
          name: "HA-Aktion bei Antwort (Aktion 2, falls Typ=ha_action)"
          default: []
          selector:
            action: {}
        input_action3_enabled:
          name: "Aktion 3 aktivieren"
          default: false
          selector:
            boolean:
        input_action3_title:
          name: "Titel Aktion 3"
          default: "Aktion 3"
          selector:
            text:
        input_action3_type:
          name: "Typ Aktion 3"
          default: "uri"
          selector:
            select:
              options:
                - uri
                - ha_action
        input_action3_uri:
          name: "URI Aktion 3 (falls Typ=uri)"
          default: ""
          selector:
            text:
        input_action3_destructive:
          name: "Destructive (Aktion 3)"
          default: false
          selector:
            boolean:
        input_action3_ha_action:
          name: "HA-Aktion bei Antwort (Aktion 3, falls Typ=ha_action)"
          default: []
          selector:
            action: {}

    peridodic_notification_section:
      name: Periodische Benachrichtigungen
      icon: mdi:refresh
      collapsed: true
      input:
        input_period:
          name: "🔄 Wiederholung"
          description: >
            Sendet periodisch Benachrichtigungen (0 = aus).
          default:
            hours: 0
            minutes: 0
            seconds: 0
          selector:
            duration:
        input_stop_button_text:
          name: "💬 Stopp-Button-Text"
          description: >
            Text für den Button, der die Wiederholung stoppt.
          default: "Stop notifying"

    custom_section:
      name: Eigene Aktionen / Bedingungen
      icon: mdi:cog
      collapsed: true
      input:
        input_custom_condition:
          name: "❌ Bedingungen"
          description: >
            Bedingungen, die erfüllt sein müssen.
          default: []
          selector:
            condition:
        input_custom_action_on:
          name: "🎬 Eigene Aktion bei Eintritt"
          description: >
            Wird ausgeführt, wenn die Entität den Zielzustand erreicht.
          default: []
          selector:
            action: {}
        input_custom_action_off:
          name: "🎬 Eigene Aktion bei Verlassen"
          description: >
            Wird ausgeführt, wenn die Entität den Zielzustand verlässt.
          default: []
          selector:
            action: {}

trigger_variables:
  input_entities: !input input_entities

trigger:
  - id: "state_on"
    trigger: state
    entity_id: !input input_entities
    to: !input input_entity_states
    for: !input input_entity_state_duration
  - id: "state_off"
    trigger: state
    entity_id: !input input_entities
    not_to: !input input_entity_states

  - id: "ms_on"
    trigger: state
    entity_id: !input ms_entities
    for: !input input_entity_state_duration
  - id: "ms_off"
    trigger: state
    entity_id: !input ms_entities

  - id: "above"
    trigger: numeric_state
    entity_id: !input input_numeric_entities
    above: !input input_numeric_entity_state
    for: !input input_numeric_entity_state_duration
  - id: "below"
    trigger: numeric_state
    entity_id: !input input_numeric_entities
    below: !input input_numeric_entity_state
    for: !input input_numeric_entity_state_duration
  - id: "above_off"
    trigger: numeric_state
    entity_id: !input input_numeric_entities
    above: !input input_numeric_entity_state
  - id: "below_off"
    trigger: numeric_state
    entity_id: !input input_numeric_entities
    below: !input input_numeric_entity_state

  - id: "num_multi_on"
    trigger: state
    entity_id: !input nm_entities
    for: !input input_numeric_entity_state_duration
  - id: "num_multi_off"
    trigger: state
    entity_id: !input nm_entities

  - id: "period"
    trigger: event
    event_type: esn_event
    event_data:
      automation: "{{ this.entity_id }}"

variables:
  input_numeric_entity_operator: !input input_numeric_entity_operator
  input_numeric_entity_state: !input input_numeric_entity_state
  input_period: !input input_period
  input_notify_devices: !input input_notify_devices
  input_notify_groups: !input input_notify_groups
  input_stop_button_text: !input input_stop_button_text
  input_entity_states: !input input_entity_states
  input_notification_auto_delete: !input input_notification_auto_delete
  input_interruption_level: !input input_interruption_level
  input_ios_sound: !input input_ios_sound
  input_group_text: !input input_group_text
  input_custom_tag: !input input_custom_tag

  input_action_timeout: !input input_action_timeout

  a1_enabled: !input input_action1_enabled
  a1_title: !input input_action1_title
  a1_type: !input input_action1_type
  a1_uri: !input input_action1_uri
  a1_destructive: !input input_action1_destructive
  a1_ha_action: !input input_action1_ha_action
  a2_enabled: !input input_action2_enabled
  a2_title: !input input_action2_title
  a2_type: !input input_action2_type
  a2_uri: !input input_action2_uri
  a2_destructive: !input input_action2_destructive
  a2_ha_action: !input input_action2_ha_action
  a3_enabled: !input input_action3_enabled
  a3_title: !input input_action3_title
  a3_type: !input input_action3_type
  a3_uri: !input input_action3_uri
  a3_destructive: !input input_action3_destructive
  a3_ha_action: !input input_action3_ha_action

  ms_entities: !input ms_entities
  ms_target_states: !input ms_target_states

  nm_entities: !input nm_entities
  nm_operators: !input nm_operators
  nm_values: !input nm_values

  is_period_trigger: "{{ trigger.id == 'period' }}"
  now_ts: "{{ now() }}"
  is_perodical: "{{ as_datetime(now_ts) != as_datetime(now_ts) + timedelta(**input_period) }}"
  entity: >
    {% if is_period_trigger %}
      {{ trigger.event.data.entity }}
    {% else %}
      {{ trigger.entity_id }}
    {% endif %}
  entity_name: "{{ state_attr(entity, 'friendly_name') }}"

  action_tag: "STOP_{{ this.entity_id }}_{{ entity }}"
  default_tag: "{{ this.entity_id.split('.')[1] + entity.split('.')[1] }}"
  tag: >
    {% set t = (input_custom_tag | string) %}
    {% if t|length > 0 %}
      {{ t }}
    {% else %}
      {{ default_tag }}
    {% endif %}

  action_buttons: >
    {% set acts = [] %}
    {% if a1_enabled %}
      {% if a1_type == 'uri' %}
        {% set acts = acts + [ {'action':'URI_1','title':a1_title,'uri':a1_uri,'destructive': a1_destructive} ] %}
      {% else %}
        {% set acts = acts + [ {'action':'ACT_1','title':a1_title,'destructive': a1_destructive} ] %}
      {% endif %}
    {% endif %}
    {% if a2_enabled %}
      {% if a2_type == 'uri' %}
        {% set acts = acts + [ {'action':'URI_2','title':a2_title,'uri':a2_uri,'destructive': a2_destructive} ] %}
      {% else %}
        {% set acts = acts + [ {'action':'ACT_2','title':a2_title,'destructive': a2_destructive} ] %}
      {% endif %}
    {% endif %}
    {% if a3_enabled %}
      {% if a3_type == 'uri' %}
        {% set acts = acts + [ {'action':'URI_3','title':a3_title,'uri':a3_uri,'destructive': a3_destructive} ] %}
      {% else %}
        {% set acts = acts + [ {'action':'ACT_3','title':a3_title,'destructive': a3_destructive} ] %}
      {% endif %}
    {% endif %}
    {% if is_perodical %}
      {% set acts = acts + [ {'action': action_tag, 'title': input_stop_button_text} ] %}
    {% endif %}
    {{ acts }}

  new_state: >
    {% if is_period_trigger %}
      {{ states(entity) }}
    {% else %}
      {{ trigger.to_state.state }}
    {% endif %}
  old_state: >
    {% if is_period_trigger %}
      {{ trigger.event.data.last_state }}
    {% else %}
      {{ trigger.from_state.state }}
    {% endif %}

  notify_devices: "{{ input_notify_devices | map('device_attr', 'name') | list }}"
  notify: >
    {% set result = namespace(r=[]) %}
    {% for device in notify_devices %}
      {% set result.r = result.r + ['notify.mobile_app_' + device | slugify] %}
    {% endfor %}
    {% for group in input_notify_groups %}
      {% set result.r = result.r + ['notify.' + group] %}
    {% endfor %}
    {{ result.r }}

  ms_index: >
    {% set lst = ms_entities | list %}
    {% if entity in lst %}{{ lst.index(entity) }}{% else %}-1{% endif %}
  ms_states_for_entity: >
    {% set states_list = ms_target_states | list %}
    {% if ms_index >= 0 and ms_index < states_list|length %}
      {% set raw = (states_list[ms_index] | string) %}
      {{ (raw | replace(',', '|') | lower).split('|') | map('trim') | list }}
    {% else %}
      {{ [] }}
    {% endif %}

  nm_index: >
    {% set lst = nm_entities | list %}
    {% if entity in lst %}{{ lst.index(entity) }}{% else %}-1{% endif %}
  nm_op_for_entity: >
    {% set ops = nm_operators | list %}
    {% if nm_index >= 0 and nm_index < ops|length %}
      {{ ops[nm_index] }}
    {% else %}
      {{ 'above' }}
    {% endif %}
  nm_val_for_entity: >
    {% set vals = nm_values | list %}
    {% if nm_index >= 0 and nm_index < vals|length %}
      {{ (vals[nm_index] | float(0)) }}
    {% else %}
      {{ 0 }}
    {% endif %}

  create_notifictaion: >
    {{
      trigger.id in ['state_on','period']
      or (trigger.id in ['above'] and input_numeric_entity_operator == 'above')
      or (trigger.id in ['below'] and input_numeric_entity_operator == 'below')
      or (
        trigger.id == 'num_multi_on' and (
          (nm_op_for_entity == 'above' and (new_state | float(0)) > (nm_val_for_entity | float(0)))
          or
          (nm_op_for_entity == 'below' and (new_state | float(0)) < (nm_val_for_entity | float(0)))
        )
      )
      or (
        trigger.id == 'ms_on'
        and (new_state | lower) in ms_states_for_entity
      )
    }}

condition:
  - condition: or
    conditions:
      - condition: template
        value_template: >
          {{
            (not create_notifictaion and input_notification_auto_delete)
            or
            (trigger.id in ['state_off','above_off','below_off','num_multi_off','ms_off'] and input_notification_auto_delete)
          }}
      - condition: and
        conditions:
          - condition: and
            conditions: !input input_custom_condition
          - condition: template
            value_template: "{{ create_notifictaion }}"

action:
  - if:
      - condition: template
        value_template: "{{ create_notifictaion }}"
    then:
      - if:
          - condition: template
            value_template: !input input_ha_notification
        then:
          - action: persistent_notification.create
            data:
              title: !input input_title
              message: !input input_message
              notification_id: "{{ tag }}"

      - variables:
          custom_action_on: !input input_custom_action_on
      - if:
          - condition: template
            value_template: "{{ custom_action_on != none }}"
        then:
          - choose: []
            default: !input input_custom_action_on

      - repeat:
          count: "{{ notify | count | int }}"
          sequence:
            - variables:
                index: "{{ repeat.index-1 }}"
                notify_target: "{{ notify[index] }}"
            - action: "{{ notify_target }}"
              data:
                title: !input input_title
                message: !input input_message
                data:
                  ttl: 0
                  priority: high
                  tag: "{{ tag }}"
                  persistent: !input input_persistent_notification
                  sticky: !input input_persistent_notification
                  group: !input input_group_text
                  push:
                    interruption-level: !input input_interruption_level
                    sound: !input input_ios_sound
                  actions: "{{ action_buttons }}"

      - if:
          - condition: template
            value_template: "{{ is_perodical }}"
        then:
          - wait_for_trigger:
              - trigger: event
                event_type: mobile_app_notification_action
                event_data:
                  action: "{{ action_tag }}"
            timeout: !input input_period
          - variables:
              latest_state: "{{ states(entity) }}"
              latest_trigger_id: >
                {% if is_period_trigger %}
                  {{ trigger.event.data.trigger_id }}
                {% else %}
                  {{ trigger.id }}
                {% endif %}
              latest_state_condition: >
                {% if latest_trigger_id == 'state_on' %}
                  {{ latest_state in input_entity_states }}
                {% elif latest_trigger_id == 'above' %}
                  {{ latest_state | float > input_numeric_entity_state | float }}
                {% elif latest_trigger_id == 'below' %}
                  {{ latest_state | float < input_numeric_entity_state | float }}
                {% elif latest_trigger_id == 'ms_on' %}
                  {{ (latest_state | lower) in ms_states_for_entity }}
                {% elif latest_trigger_id == 'num_multi_on' %}
                  {{ (latest_state | float(0)) > (nm_val_for_entity | float(0)) if nm_op_for_entity == 'above'
                     else (latest_state | float(0)) < (nm_val_for_entity | float(0)) }}
                {% endif %}
          - if:
              - condition: template
                value_template: "{{ latest_state_condition }}"
              - condition: template
                value_template: "{{ wait.trigger == none }}"
            then:
              - event: esn_event
                event_data:
                  entity: "{{ entity }}"
                  automation: "{{ this.entity_id }}"
                  last_state: "{{ latest_state }}"
                  trigger_id: "{{ latest_trigger_id }}"

      - wait_for_trigger:
          - trigger: event
            event_type: mobile_app_notification_action
            event_data:
              tag: "{{ tag }}"
        timeout: !input input_action_timeout

      - choose:
          - conditions:
              - condition: template
                value_template: "{{ wait.trigger is not none and wait.trigger.event.data.action in ['ACT_1'] }}"
              - condition: template
                value_template: "{{ a1_enabled and a1_type == 'ha_action' }}"
            sequence: !input input_action1_ha_action
          - conditions:
              - condition: template
                value_template: "{{ wait.trigger is not none and wait.trigger.event.data.action in ['ACT_2'] }}"
              - condition: template
                value_template: "{{ a2_enabled and a2_type == 'ha_action' }}"
            sequence: !input input_action2_ha_action
          - conditions:
              - condition: template
                value_template: "{{ wait.trigger is not none and wait.trigger.event.data.action in ['ACT_3'] }}"
              - condition: template
                value_template: "{{ a3_enabled and a3_type == 'ha_action' }}"
            sequence: !input input_action3_ha_action

    else:
      - action: notify.notify
        data:
          data:
            tag: "{{ tag }}"
            ttl: 0
            priority: high
          message: clear_notification
      - action: persistent_notification.dismiss
        data:
          notification_id: "{{ tag }}"
      - variables:
          custom_action_off: !input input_custom_action_off
      - if:
          - condition: template
            value_template: "{{ custom_action_off != none }}"
        then:
          - choose: []
            default: !input input_custom_action_off

mode: parallel
